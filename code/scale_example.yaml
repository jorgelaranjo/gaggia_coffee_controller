esphome:
  name: devboard-esp32

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: 
    password: 

captive_portal:

time:
  - platform: homeassistant
    id: time_hassio
    timezone: CST+4CDT,M9.1.0/0,M4.1.0/0

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  frequency: 800kHz
  
spi:
  miso_pin: GPIO12
  mosi_pin: GPIO13
  clk_pin: GPIO14
  
globals:
  - id: initial_zero
    type: float
    restore_value: yes
    # NOTE: make sure to align this value to the one used in "calibrate_linear" below!
    initial_value: '-95770'
  - id: auto_tare_enabled
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: auto_tare_difference
    type: float
    restore_value: no
    initial_value: '0'
  - id: manual_tare_flag
    type: bool
    restore_value: no
    initial_value: 'false'
  
switch:
  ## Switch to enable/disable the auto tare feature
  - platform: template
    id: smart_scale_continuous_tare_enabled
    name: "Smart Scale Continuous Tare Enabled"
    lambda: |-
      return id(auto_tare_enabled);
    turn_on_action:
      - lambda: |-
          id(auto_tare_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(auto_tare_enabled) = false;
  
  ## Switch used to initiate a manual tare
  - platform: template
    id: smart_scale_manual_tare_action_switch
    name: "Smart Scale Manual Tare Action"
    lambda: |-
      return id(manual_tare_flag);
    turn_on_action:
      - lambda: |-
          id(auto_tare_difference) = id(initial_zero) - id(smart_scale_hx711_value_raw).state;
      - switch.turn_off: smart_scale_manual_tare_action_switch
    turn_off_action:
      - lambda: |-
          id(manual_tare_flag) = false;
## Sensor Configuration ##
  
sensor:
  # template sensors from global variables
  - platform: template
    id: smart_scale_initial_zero
    name: "Smart Scale Initial Zero"
    lambda: |-
      return id(initial_zero);
    update_interval: 1s
  - platform: template
    id: smart_scale_auto_tare_difference
    name: "Smart Scale Auto Tare Difference"
    lambda: |-
      return id(auto_tare_difference);
    update_interval: 1s
  # RAW Scale input
  - platform: hx711
    id: smart_scale_hx711_value_raw
    internal: True
    dout_pin: GPIO32
    clk_pin: GPIO33
    gain: 128
    unit_of_measurement: g
    accuracy_decimals: 3
    update_interval: 0.1s
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
    on_value:
      then:
        - sensor.template.publish:
            id: smart_scale_hx711_value
            state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
        - if:
            condition:
              and:
                - lambda: 'return id(auto_tare_enabled);'
                # current smart scale value is below approx. 10KG (raw value -275743) aka nobody is standing on the scale
                - lambda: 'return id(smart_scale_hx711_value).state < 5.0;'
            then:
              - if:
                  condition:
                    # current raw scale value is below expected zero value
                    - lambda: 'return id(smart_scale_hx711_value_raw).state < (id(initial_zero) - id(auto_tare_difference));'
                  then:
                    # INcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) += 1;
                  else:
                    # DEcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) -= 1;
  # Mapped value to KG
  - platform: template
    id: smart_scale_hx711_value
    name: "Smart Scale HX711 Value"
    internal: False
    filters:
      # apply auto_tare difference
      - lambda: 'return x + id(auto_tare_difference);'
      # apply rough calibration
      - calibrate_linear:
          # retrieve these values by evaluating the raw values with loads of known mass.
          # note that a bigger difference between measurements usually results in higher resolution,
          # so measure 0 Kg and the highest known mass you have (like f.ex. your own weight, measured by a normal scale with good accuracy)
          #- -265348 -> 0
          #- -2100073 -> 949.9
          - -95770 -> 0
          - 1738955 -> 949.9
          
      # map values below 0.1 to 0 (to decrease value changes due to random fluctuation)
      #      - lambda: |-
      #          if (x <= 0.1) {
      #            return 0.0;
      #          } else {
      #            return x;
      #          }
    unit_of_measurement: g
    accuracy_decimals: 1
    update_interval: 0.1s
    on_value:
      then:
        if:
          condition:
            - lambda: 'return id(smart_scale_hx711_value).state > 100;'
          then:
            - display.page.show: menu
          else:
            - display.page.show: principal
                
font:
  - file: "Arial.ttf"
    id: arial30
    size: 30
  - file: "Arial.ttf"
    id: arial14
    size: 14
  
display:
  - platform: ssd1306_i2c
    id: display091
    model: "SSD1306 128x32"
    #    reset_pin: D4
    address: 0x3C
    update_interval: 0.05s
    pages:
      - id: principal
        lambda: |-
          it.printf(0, 0, id(arial30), TextAlign::TOP_LEFT, "%.1f g",id(smart_scale_hx711_value).state);
      - id: menu
        lambda: |-
          it.printf(0, 0, id(arial14), TextAlign::TOP_LEFT, "%.1f g",id(smart_scale_hx711_value).state);

      
